####MACROS CFG LIST OF MACROS AND THEIR MODULES

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(70)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(205)|float %}
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28
    # If you are generating a new bed mesh:
    BED_MESH_CALIBRATE
    #ADJUSTS PROBE OFFSET 
    BED_MESH_PROFILE LOAD=default
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Set and wait for nozzle to reach printing temperature
    M109 S{EXTRUDER_TEMP}
    # Start printing
    # Get first-layer bed-temp from slicer
    # setup kamp
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
    # SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1
    SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 Z_HEIGHT=.3 PURGE_AMOUNT=30

[gcode_macro start_dual_print]
gcode: 
    {% set bed_temp = params.BED_TEMP|default(40)|float %}
	{% set e0_temp = params.E0_TEMP|default(200)|float %}
	{% set e1_temp = params.E1_TEMP|default(200)|float %}
	G90; use absolute coordinates
	M82; extruder absolute mode
	M104 T0 S{e0_temp}; set extruder temp E0
	M104 T1 S{e1_temp}; set extruder temp E1
	M140 S{bed_temp}; set bed temp
	G28 X Y; Home X Y
	M109 T0 S{e0_temp}; wait for extruder temp E0
	M109 T1 S{e1_temp}; wait for extruder temp E1
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp*0.9}
	G28 Z;Hhome Z

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    M107 ;
    G91
    G1 E-5 F300 ; retract a little
    G1 Z+20 ; lift print head
    G28 X5 Y5 ; homing
    M84 ; disable stepper motors
    G90 ; absolute positioning
    TEMPERATURE_WAIT sensor=heater_extruder maximum=60
    SET_PIN PIN=PS_ON_OFF VALUE=0 ; shut down the printer

# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro G29]
gcode:
    {% set t = params.T|default(0)|float %}

    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        SAVE_GCODE_STATE NAME=G29_state
        G90
        G1 Z10 F240
        {% if t > 30.0 %}
        #M190 S{t}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1}
        {% endif %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        {% if 'S' in params %}
        #M140 S{params.S}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S+1}
        {% endif %}
        G90
        G1 Z10 F240
        G1 X150 Y155 F6000
        RESTORE_GCODE_STATE NAME=G29_state MOVE=0
    {% endif %}

[gcode_macro G29]
gcode:
    {% set t = params.T|default(0)|float %}

    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        SAVE_GCODE_STATE NAME=G29_state
        G90
        G1 Z10 F240
        {% if t > 30.0 %}
        #M190 S{t}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1}
        {% endif %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        {% if 'S' in params %}
        #M140 S{params.S}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S+1}
        {% endif %}
        G90
        G1 Z10 F240
        G1 X150 Y155 F6000
        RESTORE_GCODE_STATE NAME=G29_state MOVE=0
    {% endif %}

